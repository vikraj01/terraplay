name: Deploy to EC2

on:
  workflow_run:
    workflows: ["Build and Push Docker to ECR"]
    types:
      - completed

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      # AWS Credentials Setup for EC2 and ECR Access
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-south-1

      # SSH into EC2 and Install Docker on Amazon Linux 2
      - name: Install Docker on EC2
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          script: |
            # Update the package list
            sudo yum update -y

            # Install Docker on Amazon Linux 2
            sudo amazon-linux-extras install docker -y

            # Start Docker and enable it to run on boot
            sudo systemctl start docker
            sudo systemctl enable docker

            # Add the ec2-user to the docker group (or replace with your user)
            sudo usermod -aG docker ec2-user

            # Restart Docker to apply changes
            sudo systemctl restart docker

      # SSH into EC2 to Deploy Application
      - name: Deploy Application on EC2
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          script: |
            echo "Debugging: Image tag received = ${{ needs.build_and_push.outputs.image_tag }}"

            # Log in to AWS ECR securely using --password-stdin
            aws ecr get-login-password --region ap-south-1 | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.ap-south-1.amazonaws.com

            # Pull the latest Docker image using the dynamic tag
            docker pull ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.ap-south-1.amazonaws.com/global_terraplay_ecr:${{ needs.build_and_push.outputs.image_tag }}

            # Stop and remove the existing container, if it's running
            docker stop global_terraplay || true
            docker rm global_terraplay || true

            # Run the new Docker container with environment variables passed in
            docker run -d --name global_terraplay -p 80:8000 \
              -e DISCORD_BOT_TOKEN=${{ secrets.DISCORD_BOT_TOKEN }} \
              -e DISCORD_CHANNEL_ID=${{ secrets.DISCORD_CHANNEL_ID }} \
              -e REPO_TOKEN=${{ secrets.REPO_TOKEN }} \
              -e ACTIONS_WEBHOOK_SECRET=${{ secrets.ACTIONS_WEBHOOK_SECRET }} \
              -e AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }} \
              -e AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }} \
              -e AWS_REGION=${{ secrets.AWS_REGION }} \
              -e DYNAMO_TABLE=${{ secrets.DYNAMO_TABLE }} \
              -e APP_ENV=${{ secrets.APP_ENV }} \
              ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.ap-south-1.amazonaws.com/global_terraplay_ecr:${{ needs.build_and_push.outputs.image_tag }}
